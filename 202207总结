
1、zmq消息中间件的架构和实现

2、TCP断开链接以后的处理

TCP 有一个机制是保活机制。这个机制的原理是这样的：
答：TCP 有一个机制是保活机制。这个机制的原理是这样的：定义一个时间段，在这个时间段内，如果没有任何连接相关的活动，TCP 保活机制会开始作用，每隔一个时间间隔，发送一个探测报文，该探测报文包含的数据非常少，
如果连续几个探测报文都没有得到响应，则认为当前的 TCP 连接已经死亡，系统内核将错误信息通知给上层应用程序。

简单来说，三次握手的首要原因是为了防止旧的重复连接初始化造成混乱。
TCP 建立连接时，通过三次握手能防止历史连接的建立，能减少双方不必要的资源开销，能帮助双方同步初始化序列号。序列号能够保证数据包不重复、不丢弃和按序传输。

不使用「两次握手」和「四次握手」的原因：

「两次握手」：无法防止历史连接的建立，会造成双方资源的浪费，也无法可靠的同步双方序列号；

「四次握手」：三次握手就已经理论上最少可靠连接建立，所以不需要使用更多的通信次数。

为什么 TIME_WAIT 等待的时间是 2MSL？

MSL 是 Maximum Segment Lifetime，报文最大生存时间，它是任何报文在网络上存在的最长时间，超过这个时间报文将被丢弃。因为 TCP 报文基于是 IP 协议的，而 IP 头中有一个 TTL 字段，是 IP 数据报可以经过的最大路由数，每经过一个处理他的路由器此值就减 1，当此值为 0 则数据报将被丢弃，同时发送 ICMP 报文通知源主机。

MSL 与 TTL 的区别：MSL 的单位是时间，而 TTL 是经过路由跳数。所以 MSL 应该要大于等于 TTL 消耗为 0 的时间，以确保报文已被自然消亡。

TIME_WAIT 等待 2 倍的 MSL，比较合理的解释是：网络中可能存在来自发送方的数据包，当这些发送方的数据包被接收方处理后又会向对方发送响应，所以一来一回需要等待 2 倍的时间。

比如，如果被动关闭方没有收到断开连接的最后的 ACK 报文，就会触发超时重发 Fin 报文，另一方接收到 FIN 后，会重发 ACK 给被动关闭方， 一来一去正好 2 个 MSL。

3、智能指针相关
shared_ptr、unique_ptr、weak_ptr,const_ptr
weak_ptr保证shared_ptr的释放，防止循环引用  参考https://www.cnblogs.com/wxquare/p/4759020.html
QT事件机制有哪些哪些示例

4、lamda表达式
信号槽的捕捉写法，[]内部不同参数的代表含义

5、七层网络协议及其对应的相关协议
简述七层/五层网络协议及其相关协议，说明http协议在网络中的解析过程

详情可见  https://xiaolincoding.com/network/2_http/http_interview.html
可以重点看看网络编程相关，包括tcp协议的链接过程，防止syn攻击策略设置等等


6、inline函数的优劣势

7、类型转换等知识点
static_cast、const_cast、reinterpret_cast和dynamic_cast，重点了解静态和动态 了解其运行时间，动态要知道父类子类如何互相转换

8、深浅拷贝举例
浅拷贝 不分配内存空间；深拷贝 分配内存空间

9、单例模式的用法  包括互斥变量的共享  mutex
单例模式(Singleton Pattern，也称为单件模式)，使用最广泛的设计模式之一。其意图是保证一个类仅有一个实例，并提供一个访问它的全局访问点，该实例被所有程序模块共享。
设计时采用static关键字保证唯一实例，提供public接口，但是此仅支持11以后才能保证
//version 1.1 lazy singleton
//class Singleton {

//private:
//    static Singleton* instance;
//private:
//    Singleton(){};
//    ~Singleton(){};
//    Singleton(const Singleton&);
//    Singleton& operator=(const Singleton&);

//public:

//    void start();

//    void stop();

//    int switchcount();
//    static Singleton* getInstance(){
//        if(instance == NULL){
//            instance = new Singleton();
//        }
//        return instance;
//    }

//private:
//    int cnt = 0;
//    bool openstatus = false;

//};
//Singleton* Singleton::instance = NULL;

//version 1.1 带析构的版本
//class Singleton
//{
//private:
//    static Singleton* instance;
//    int cnt = 0;
//    bool openstatus = false;
//private:
//    Singleton(){};
//    ~Singleton(){};
//    Singleton(const Singleton&);
//    Singleton& operator=(const Singleton&);
//private:
//    class Deletor{
//    public:
//        ~Deletor(){
//            if(Singleton::instance != NULL){
//                delete Singleton::instance;
//            }
//        }
//    };
//    static Deletor deletor;
//public:
//    static Singleton* getInstance(){
//        if(instance == NULL){
//            instance = new Singleton();
//        }
//        return instance;
//    }

//    void start();

//    void stop();

//    int switchcount();
//};

//单例模式 面试标准版本
//定义一个单例类，私有化它的构造函数，以防止外界创建单例类的对象；使用类的私有静态指针变量指向类的唯一实例，并用一个公有的静态方法获取该实例。
//class Singleton
//{
//private:
//    int cnt = 0;
//    bool openstatus = false;
//private:
//    Singleton(){};
//    ~Singleton(){};
//    Singleton(const Singleton&);
//    Singleton& operator=(const Singleton&);
//public:
//    static Singleton& getInstance(){
//        static Singleton instance;
//        return instance;
//    }
//};
//Singleton* Singleton::instance = NULL;

10、红黑树和哈希表的作用与异同点

11、算法题   
(1)二叉树的镜像——递归非递归皆要
//二叉树镜像翻转

struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
    TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
};

//递归解法
//class Solution_dp{
//public:
//    TreeNode* Mirror(TreeNode* pRoot){
//        if(pRoot != nullptr){
//            return ;
//        }
//        TreeNode* left = Mirror(pRoot->left);
//        TreeNode* right = Mirror(pRoot->right);
//        pRoot->left = right;
//        pRoot->right = left;
//        return pRoot;

//    }
//};

//非递归解法  队列
//class Solution_queue{
//public:
//    TreeNode* Mirror(TreeNode* pRoot){
//        if(pRoot == nullptr) return;
//        //层次遍历
//        queue<TreeNode*> q1;
//        q1.emplace(pRoot);

//        while(!q1.empty()){
//            TreeNode* pNode = q1.front();
//            q1.pop();

//            //交换该节点的左右子树
//            TreeNode* temp = pNode->left;
//            pNode->left = pNode->right;
//            pNode->right = temp;

//            //若该节点的左子节点不为空，将该节点入队列
//            if(pNode->left != nullptr){
//                q1.emplace(pNode->left);
//            }
//            //若该节点的右子节点不为空，将该节点入队列
//            if(pNode->right != nullptr){
//                q1.emplace(pNode->right);
//            }
//        }
//        return pRoot;

//    }
//};

//非递归解法  栈
//class Solution_stack{
//public:
//    TreeNode* Mirror(TreeNode* pRoot){
//        if(pRoot == nullptr) return;
//        //层次遍历
//        stack<TreeNode*> s1;
//        s1.emplace(pRoot);

//        while(!s1.empty()){
//            TreeNode* pNode = s1.top();
//            s1.pop();

//            //交换该节点的左右子树
//            TreeNode* temp = pNode->left;
//            pNode->left = pNode->right;
//            pNode->right = temp;

//            //若该节点的左子节点不为空，将该节点入队列
//            if(pNode->left != nullptr){
//                s1.emplace(pNode->left);
//            }
//            //若该节点的右子节点不为空，将该节点入队列
//            if(pNode->right != nullptr){
//                s1.emplace(pNode->right);
//            }
//        }
//        return pRoot;

//    }
//};
(2)链表倒数第k个点 快慢指针即可

12、进程与线程的区别
占不占有资源一定要回答，可以适当引入协程

13、左值和右值 c++新特性 一定要知道

14、泛化特化、完美转发  模板相关的知识点
举例vector和list的iteration实现的区别

15、TCP网络字节序
网络字节序和系统字节序的区别  以及相互转换函数的而写法

16、多线程相关
(1)多线程的概念以及使用场景
(2)多线程的同步与互斥的方式
(3)QT中有几种线程创建方式，以及自带的信号互斥量和锁
(4)c++11中 原子操作相关变量和指针保证多线程安全的方法
(5)自旋锁、互斥锁的实现以及效率对比 可大致看看其他锁   条件锁、读写锁、递归锁

17、简述QT调用线程的四种方式

18、QT线程中子线程能否调用界面的控件
不能，子线程可传递信号给主进程，主进程进行界面操作

19、内存对齐的方式

20、简述五种信号连接方式，信号槽链接类型是什么时候确定的？
答：connect函数中的连接类型是信号发出以后才确定的连接类型

21、explicit Widget(QWidget *parent = 0),中parennt有什么特殊含义？
答：如果不指定构造函数，则派生类会调用基类的默认构造函数 ，派生类构造函数的初始化列表只能初始化派生类成员，不能直接初始化继承成员，
如果想要调用基类的有参构造函数，则可以在派生类的初始化列表中显示指定
如果parent参数非空的话，那么该构造函数使用了其父窗口的调色板，并且发送了QChildEvent事件，
这会让新的窗口成为parent所指窗口的子窗口，那么当父窗口被删除时，子窗口也会自动的被删除。

22、多态的实现方式，虚指针和虚表的建立时间 父类子类虚表函数的覆盖，虚析构的作用等等。

23、static关键字的作用等等





sql相关:
数据库的左右链接 groupby union sum关键字
1、左连接的定义：是以左表为基础，根据ON后给出的两表的条件将两表连接起来。结果会将左表所有的查询信息列出，而右表只列出ON后条件与左表满足的部分。左连接全称为左外连接，是外连接的一种。
2、右连接的定义，是以右表为基础，根据ON后给出的两表的条件将两表连接起来。结果会将右表所有的查询信息列出，而左表只列出ON后条件与右表满足的部分。右连接全称为右外连接，是外连接的一种。
3、内链接：使用比较运算符根据每个表共有的列的值匹配两个表中的行；



学习网址：
1、https://xiaolincoding.com/
2、服务器开发 https://github.com/qinguoyi/TinyWebServer#%E5%BA%96%E4%B8%81%E8%A7%A3%E7%89%9B
3、必刷题目 https://leetcode.cn/problem-list/2cktkvj/  
4、算法 必刷入门和中等刷完基本就ok了 华为od相关基本差不多 https://leetcode.cn/study-plan/algorithms/







