Title:ContainerWithMostWater

Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.

Note: You may not slant the container and n is at least 2.


The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.

 

Example:

Input: [1,8,6,2,5,4,8,3,7]
Output: 49

class Solution {
public:
    int maxArea(vector<int>& height) {
        //思路：求一个数列中能够使得min(ia,ib)*(b-a)最大
        /*int maxsum=0;
        for(int i=0;i<height.size();i++)
        {
            int sum=0;
            for(int j=i;j<height.size();j++)
            {
                sum=(j-i)*min(height[i],height[j]);
                if(sum>maxsum)
                    maxsum=sum;
            }
        }
        return maxsum;*/
        int i=0,j=height.size()-1,h,v=0;
        while(i<j)
        {
            h=min(height[i],height[j]);
            v=max(v,(j-i)*h);
            while(height[i]<=h&&i<j) i++;
            while(height[j]<=h&&i<j) j--;
        }
        return v;
    }
};
